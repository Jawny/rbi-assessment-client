{"version":3,"sources":["components/PlayerScore.js","App.js","utils/CheckWinner.js","utils/CalculateScore.js","reportWebVitals.js","index.js"],"names":["PlayerScore","props","player","scores","gameOver","handleScore","index","onClick","disabled","App","useState","setScores","gameId","setGameId","winner","setWinner","setGameOver","updateUrl","useEffect","getGameData","handleIfGameOver","a","axios","get","data","console","log","length","post","newGameId","gameWinner","CheckWinner","currentScore","newScore","newScores","put","id","then","res","catch","err","error","handleResetGame","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97973f7d.chunk.js","sourcesContent":["const PlayerScore = (props) => {\n  const { player, scores, gameOver, handleScore, index } = props;\n  return (\n    <div>\n      <h1>{player}</h1>\n      <h1>{scores[index]}</h1>\n      <button\n        onClick={() => {\n          handleScore(index);\n        }}\n        disabled={gameOver}\n      >\n        {player} Scored\n      </button>\n    </div>\n  );\n};\nexport { PlayerScore };\n","import React, { useState, useEffect } from \"react\";\nimport { PlayerScore } from \"./components/PlayerScore\";\nimport { CalculateScore, CheckWinner } from \"./utils/index\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [scores, setScores] = useState([0, 0]);\n  const [gameId, setGameId] = useState(\"\");\n  const [winner, setWinner] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Use for local development\n  // const updateUrl = \"http://localhost:8000/update\";\n  // const readUrl = \"http://localhost:8000/\";\n  // const createUrl = \"http://localhost:8000/create\";\n  // const deleteUrl = \"http://localhost:8000/delete\";\n\n  const updateUrl = \"https://rbi-server.herokuapp.com/update\";\n  const readUrl = \"https://rbi-server.herokuapp.com/\";\n  const createUrl = \"https://rbi-server.herokuapp.com/create\";\n  const deleteUrl = \"https://rbi-server.herokuapp.com/delete\";\n\n  // Initialize the game\n  useEffect(() => {\n    getGameData();\n  }, []);\n\n  // Check if the game is over whenever scores are updated\n  useEffect(() => {\n    handleIfGameOver(scores);\n  }, [scores]);\n\n  // Get game data from database, if no game data exists then create a game with scores [0,0]\n  const getGameData = async () => {\n    const data = await axios.get(readUrl);\n    console.log(\"gamedata\", data);\n    // Check if the database is empty, if true then create a game with scores [0,0]\n    // Else get game[0]'s id and setGameId.\n    if (data.data.length < 1) {\n      const newGameId = await axios.post(createUrl);\n      setGameId(newGameId.data[\"_id\"]);\n    } else {\n      setGameId(data.data[0][\"_id\"]);\n      setScores(data.data[0].scores);\n    }\n  };\n\n  // Check if game is over setGameOver to true, and setWinner to winning player\n  const handleIfGameOver = (scores) => {\n    // Check if either player has won and return 0 for player1 and 1 for player2\n    const gameWinner = CheckWinner(scores);\n    // Check if gameWinner has been set, null = no winner\n    if (gameWinner != null) {\n      setGameOver(true);\n      gameWinner ? setWinner(\"Player2\") : setWinner(\"Player1\");\n    }\n  };\n\n  // Calculate new score based on index,\n  // Update Scores state and make post request to update database score\n  // Check if game is over\n  const handleScore = async (index) => {\n    // Calculate new score from index and setScores state with new scores\n    // index 0 = score1 index 1 = score2\n    const newScore = CalculateScore(scores[index]);\n    const newScores = index ? [scores[0], newScore] : [newScore, scores[1]];\n    setScores(newScores);\n\n    // Update scores in the database\n    await axios\n      .put(updateUrl, { scores: newScores, id: gameId })\n      .then((res) => {\n        console.log(res);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  // Reset database scores to [0,0], set gameOver state to false and call getGameData to rerender DOM\n  const handleResetGame = async () => {\n    await axios.put(updateUrl, { scores: [0, 0], id: gameId });\n    await setWinner(\"\");\n    await setGameOver(false);\n    await getGameData();\n  };\n\n  return (\n    <div>\n      <PlayerScore\n        player=\"player1\"\n        scores={scores}\n        index={0}\n        handleScore={handleScore}\n        gameOver={gameOver}\n      />\n      <PlayerScore\n        player=\"player2\"\n        scores={scores}\n        index={1}\n        handleScore={handleScore}\n        gameOver={gameOver}\n      />\n      {winner != \"\" ? <h1>{winner} has won!</h1> : <></>}\n      <button onClick={handleResetGame}>RESET GAME</button>\n    </div>\n  );\n};\n\nexport default App;\n","const CheckWinner = (scores) => {\n  const difference = scores[0] - scores[1];\n  switch (difference) {\n    case 20:\n      return 0;\n      break;\n    case 25:\n      return 0;\n      break;\n    case 30:\n      return 0;\n      break;\n    case -20:\n      return 1;\n      break;\n    case -25:\n      return 1;\n      break;\n    case -30:\n      return 1;\n      break;\n    default:\n      return null;\n      break;\n  }\n};\n\nexport { CheckWinner };\n","const CalculateScore = (currentScore) => {\n  if (currentScore < 30) {\n    return currentScore + 15;\n  } else {\n    return currentScore + 10;\n  }\n};\n\nexport { CalculateScore };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}